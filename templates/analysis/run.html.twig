{% extends 'base.html.twig' %}
{% block title %}Analysis Running{% endblock %}

{% block body %}
    <h1 class="font-bold text-5xl text-white">Runners</h1>

        <loading-circle id="loading1" width="200" stroke="20" bgcolor="#009BBD" fcolor="#006D85" progress="0"></loading-circle>
        <row-component leftText="Test1" rightText="Test2" dropdown >
            <p>testsetst</p>
        </row-component>
        <div>
            Runners status: <span class="percent">0</span> <span>%</span>
        </div>
        <div class="status"></div>

        <div style="margin-top: 40px">
            <h2>Logs</h2>
            <pre class="logs" style="word-wrap: break-word; overflow: auto; height: 60vh;"></pre>
        </div>
{% endblock %}

{% block javascripts %}
    <script defer type="text/javascript">
        const process = function (url) {
            const request = new Request(url, {
                method: 'POST',
                headers: {
                    'Content-Type': 'json'
                },
                mode: 'cors',
                cache: 'default'
            })

            return new Promise((resolve, reject) => {
                fetch(request).then((response) => {
                    if (!response.ok) {
                        return reject()
                    }

                    response.json().then((data) => {
                        console.log(data)
                        if (data.success === false) {
                            return reject()
                        }

                        resolve()
                    })
                }).catch(() => {
                    return reject(false)
                })
            })
        }

        const handle_log = function(topic) {
            const url = new URL('http://localhost:9090/.well-known/mercure');
            url.searchParams.append('topic', topic);

            const eventSource = new EventSource(url);
            eventSource.onmessage = ({data}) => {
                data = JSON.parse(data)
                document.querySelector('.logs').innerHTML += `<div style="white-space: pre-wrap;">${data.log}</div>`
                document.querySelector('.logs').scrollTop = document.querySelector('.logs').scrollHeight;
            };
        }

        document.addEventListener('DOMContentLoaded', () => {
            let progress=0;
            setInterval(() => {
                // console.log(progress)
                progress += 10
                document.getElementById("loading1").setProgress(progress)
            }, 1000)

            const analysis_hash = '{{ analysis.hash }}'
            const runners_id = JSON.parse('{{ runners_id | json_encode }}')
            let percent = 0

            console.log(analysis_hash)
            console.log(runners_id)

            handle_log(`${analysis_hash}/logs`)

            // Initialize downloaded project
            console.log('INITIALIZE')
            document.querySelector(".status").textContent = "Initializing.."
            process(`/analysis/${analysis_hash}/initialize`).then(() => {
                // Start runners
                document.querySelector(".status").textContent = ""
                const promises = runners_id.map((runner_id) => {
                    document.querySelector(".status").innerHTML += `<div runner-id='${runner_id}'>Runner ${runner_id} status: <span class="runner-status">Analysis..</span></div>`
                    console.log(`START.. ${runner_id}`)
                    return process(`/analysis/${analysis_hash}/run/${runner_id}`).then(() => {
                        console.log(`END.. ${runner_id}`)
                    }).then(() => {
                        document.querySelector(`[runner-id='${runner_id}'] .runner-status`).textContent = `Finish`
                        document.querySelector(".percent").textContent = ((++percent * 100) / runners_id.length).toString()
                        document.getElementById("loading1").setProgress((percent*100)/runners_id.length)


                    })
                })

                // Clean downloaded project
                Promise.all(promises).then(async () => {
                    document.querySelector(".status").innerHTML += "<div>Cleaning..</div>"
                    console.log(`FINISHED.. cleaning`)
                    // await process(`/analysis/${analysis_hash}/clean`)
                    console.log(`FINISHED.. ok`)
                    // window.location.replace("result")
                })
            }).catch(() => {
                console.error(`ERROR.. cleaning`)
                // Clean downloaded project
                process(`/analysis/${analysis_hash}/clean`)
            })
        })
    </script>
{% endblock %}
